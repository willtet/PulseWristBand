#define USE_ARDUINO_INTERRUPTS true
#include <PulseSensorPlayground.h>
#include <SoftwareSerial.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>


//  Variables
const int PulseAnalog = 0;    // On-board Arduino ANALOG 0 (Pulse Sensor)
int incomingByte;
const int BlinkLED13 = 13;     // On-board Arduino LED 13 (Pulse Sensor)
const int HBeat = 650;    // Determine which Signal to "count as a beat", and which to ingore.
String data = "";

int16_t AcX,AcY,AcZ,Tmp,GyX,GyY,GyZ;
int16_t dx,dy,dz;
int OldAcX,OldAcY,OldAcZ,OldTmp,OldGyX,OldGyY,OldGyZ;

int AcSensitivity =10000;
boolean moved=false;
int n=0;

// Instância o Objetos
PulseSensorPlayground pulseSensor;
Adafruit_MPU6050 mpu;

// Configurações Bluetooth
SoftwareSerial bluetooth(1,0);

// The SetUp Function:
void setup() {

  Serial.begin(9600);        // Velocidade serial de cominucação (Dados para o plot) 9600 ou 115200, 115200 é melhor, pois gera menos interferencia
  bluetooth.begin(9600);

  while (!Serial)
    delay(10);

  //Intância das funções da biblioteca
  pulseSensor.analogInput(PulseAnalog);
  pulseSensor.blinkOnPulse(BlinkLED13);

  //Teste do giroscópio
  //Serial.println("Adafruit MPU6050 test!");  ok

  // Try to initialize!
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  //Serial.println("MPU6050 Found!"); ok

  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  //Serial.print("Accelerometer range set to: "); ok
  switch (mpu.getAccelerometerRange()) {
    case MPU6050_RANGE_2_G:
      Serial.println("+-2G");
      break;
    case MPU6050_RANGE_4_G:
      Serial.println("+-4G");
      break;
    case MPU6050_RANGE_8_G:
      //Serial.println("+-8G"); ok
      break;
    case MPU6050_RANGE_16_G:
      Serial.println("+-16G");
      break;
  }
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  //Serial.print("Gyro range set to: ");  ok
  switch (mpu.getGyroRange()) {
    case MPU6050_RANGE_250_DEG:
      Serial.println("+- 250 deg/s");
      break;
    case MPU6050_RANGE_500_DEG:
      //Serial.println("+- 500 deg/s");  ok
      break;
    case MPU6050_RANGE_1000_DEG:
      Serial.println("+- 1000 deg/s");
      break;
    case MPU6050_RANGE_2000_DEG:
      Serial.println("+- 2000 deg/s");
      break;
  }

  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  //Serial.print("Filter bandwidth set to: "); ok
  switch (mpu.getFilterBandwidth()) {
    case MPU6050_BAND_260_HZ:
      Serial.println("260 Hz");
      break;
    case MPU6050_BAND_184_HZ:
      Serial.println("184 Hz");
      break;
    case MPU6050_BAND_94_HZ:
      Serial.println("94 Hz");
      break;
    case MPU6050_BAND_44_HZ:
      Serial.println("44 Hz");
      break;
    case MPU6050_BAND_21_HZ:
      //Serial.println("21 Hz");  ok
      break;
    case MPU6050_BAND_10_HZ:
      Serial.println("10 Hz");
      break;
    case MPU6050_BAND_5_HZ:
      Serial.println("5 Hz");
      break;
  }

  //Configurações do Output
  pulseSensor.setSerial(Serial);
  pulseSensor.setThreshold(HBeat);


  // Verifica se o objeto "pulseSensor" foi criado e está recebendo um sinal
  if (!pulseSensor.begin()) {
    //Pisca o LED mostrando que não deu certo
    for (;;) {
      digitalWrite(BlinkLED13, LOW);
      delay(50);
      digitalWrite(BlinkLED13, HIGH);
      delay(50);
    }
  } else {
    //Serial.println("SensorCardiaco Ligado ");  //Mensagem no console ao ligar o Arduino.
  }
  data = "";
  delay(1000);
}





// The Main Loop Function+
void loop() {
  printSensorCardiaco();
  Serial.print(":");
  printDadosGiroscopio();
  delay(200);
}


void printSensorCardiaco() {
  int count = 0;
  int media = 0;
  do{
    int BPM;
    BPM = pulseSensor.getBeatsPerMinute();
    if (pulseSensor.sawStartOfBeat()) {
      media += BPM;
      count++;
    }
  }while(count < 5);
  media /=count;
  
  Serial.print(media);
  delay(1000);

}

void printDadosGiroscopio(void) {
  /* Get new sensor events with the readings */
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  AcX=a.acceleration.x;
  AcY=a.acceleration.y;
  AcZ=a.acceleration.z;
  Tmp=temp.temperature;
  GyX=g.gyro.x;
  GyY=g.gyro.y;
  GyZ=g.gyro.z;

  dx=abs(AcX-OldAcX);
  dy=abs(AcY-OldAcY);
  dz=abs(AcZ-OldAcZ);

  if(dx>AcSensitivity || dy>AcSensitivity || dz>AcSensitivity){
    moved=true;
    n=n+1;
  }
    

  if(moved==true & n>2){
    Serial.println("1");  
  }else{
    Serial.println("0");
  }

  OldAcX=AcX;
  OldAcY=AcY;
  OldAcZ=AcZ;
  moved=false;
  delay(200);
  



  
}
